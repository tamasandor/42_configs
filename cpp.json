{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Header Orthodox Cannonical Form": {
		"prefix": ["class", "hclass"],
		"body": [
			"class $TM_FILENAME_BASE",
			"{",
			"private:",
			"public:",
			"    $TM_FILENAME_BASE();",
			"    $TM_FILENAME_BASE(const $TM_FILENAME_BASE &original);",
			"    $TM_FILENAME_BASE &operator= (const $TM_FILENAME_BASE &original);",
			"    ~$TM_FILENAME_BASE();",
			"};",
			"",
		],
		"description": "Create an Orthodox Cannonical Form in your header"
	},
	"CPP Orthodox Cannocial Form": {
		"prefix": ["class", "cclass"],
		"body": [
			"",
			"$TM_FILENAME_BASE::$TM_FILENAME_BASE()",
			"{",
			"    std::cout << \"$TM_FILENAME_BASE: default constructor called\\n;\"",
			"}",
			"",
			"$TM_FILENAME_BASE::$TM_FILENAME_BASE(const $TM_FILENAME_BASE &original)",
			"{",
			"std::cout << \"$TM_FILENAME_BASE: copy constructor called\\n\";",
			"}",
			"",
			"$TM_FILENAME_BASE &$TM_FILENAME_BASE::operator = (const $TM_FILENAME_BASE &original)",
			"{",
			"std::cout << \"$TM_FILENAME_BASE: copy assignment operator called\\n\";",
			"}",
			"",
			"$TM_FILENAME_BASE::~$TM_FILENAME_BASE()",
			"{",
			"std::cout << \"$TM_FILENAME_BASE: destructor called\\n\";",
			"}",
			""
		]
	}
}